// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project_final.Models;

namespace project_final.Migrations
{
    [DbContext(typeof(SuperMarketDBcontext))]
    [Migration("20230629100807_Generating_database_migration")]
    partial class Generating_database_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("project_final.Models.Bill", b =>
                {
                    b.Property<string>("billId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<int>("billType")
                        .HasColumnType("int");

                    b.Property<DateTime>("data_of_sale")
                        .HasColumnType("datetime2");

                    b.HasKey("billId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("project_final.Models.Role", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("project_final.Models.Sales", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("billId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("data_of_sale")
                        .HasColumnType("datetime2");

                    b.Property<double>("discount")
                        .HasColumnType("float");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quentity")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("billId");

                    b.HasIndex("userId");

                    b.ToTable("sales");
                });

            modelBuilder.Entity("project_final.Models.Store", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("billId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date_of_purchase")
                        .HasColumnType("datetime2");

                    b.Property<double>("price_of_purchase")
                        .HasColumnType("float");

                    b.Property<double>("price_of_sale")
                        .HasColumnType("float");

                    b.Property<string>("product_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("profit")
                        .HasColumnType("float");

                    b.Property<int>("quintity")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("billId");

                    b.HasIndex("userId");

                    b.ToTable("stores");
                });

            modelBuilder.Entity("project_final.Models.User", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("project_final.Models.UserRoles", b =>
                {
                    b.Property<string>("userRolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("roleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("userRolesId");

                    b.HasIndex("roleId");

                    b.HasIndex("userId");

                    b.ToTable("usersRoles");
                });

            modelBuilder.Entity("project_final.Models.Sales", b =>
                {
                    b.HasOne("project_final.Models.Bill", "bill")
                        .WithMany("sales")
                        .HasForeignKey("billId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_final.Models.User", "user")
                        .WithMany("sales")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("project_final.Models.Store", b =>
                {
                    b.HasOne("project_final.Models.Bill", "bill")
                        .WithMany()
                        .HasForeignKey("billId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_final.Models.User", "user")
                        .WithMany("stores")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("project_final.Models.UserRoles", b =>
                {
                    b.HasOne("project_final.Models.Role", "role")
                        .WithMany("userRoles")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_final.Models.User", "user")
                        .WithMany("userRoles")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
